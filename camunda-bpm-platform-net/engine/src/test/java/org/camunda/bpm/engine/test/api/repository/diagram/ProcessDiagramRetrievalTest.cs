using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
 * under one or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information regarding copyright
 * ownership. Camunda licenses this file to you under the Apache License,
 * Version 2.0; you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org.camunda.bpm.engine.test.api.repository.diagram
{
	using FileUtils = org.apache.commons.io.FileUtils;
	using ProcessDiagramLayoutFactory = org.camunda.bpm.engine.impl.bpmn.diagram.ProcessDiagramLayoutFactory;
	using Command = org.camunda.bpm.engine.impl.interceptor.Command;
	using CommandContext = org.camunda.bpm.engine.impl.interceptor.CommandContext;
	using DiagramLayout = org.camunda.bpm.engine.repository.DiagramLayout;
	using DiagramNode = org.camunda.bpm.engine.repository.DiagramNode;
	using ProcessDefinition = org.camunda.bpm.engine.repository.ProcessDefinition;
	using ProcessDefinitionQuery = org.camunda.bpm.engine.repository.ProcessDefinitionQuery;
	using ProvidedProcessEngineRule = org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;
	using After = org.junit.After;
	using Before = org.junit.Before;
	using Rule = org.junit.Rule;
	using Test = org.junit.Test;
	using RunWith = org.junit.runner.RunWith;
	using Parameterized = org.junit.runners.Parameterized;
	using Parameters = org.junit.runners.Parameterized.Parameters;


//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static org.junit.Assert.assertEquals;
//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static org.junit.Assert.assertNotNull;
//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static org.junit.Assert.assertTrue;
//JAVA TO C# CONVERTER TODO TASK: This Java 'import static' statement cannot be converted to C#:
//	import static org.junit.Assert.fail;


	/// <summary>
	/// Tests process model and diagram retrieval features of the
	/// <seealso cref="RepositoryService"/>.
	/// 
	/// This test generates HTML code containing the positions and dimensions of all
	/// elements in a BPMN process and compares that to HTML files stored in
	/// 'src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram'.
	/// 
	/// If the expected HTML code needs to be changed due to changes in
	/// <seealso cref="ProcessDiagramLayoutFactory"/>, the files can be regenerated by running the
	/// test while <seealso cref="ProcessDiagramRetrievalTest.OVERWRITE_EXPECTED_HTML_FILES"/>
	/// is set to true.
	/// 
	/// @author Falko Menge
	/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @RunWith(Parameterized.class) public class ProcessDiagramRetrievalTest
	public class ProcessDiagramRetrievalTest
	{

	  /// <summary>
	  /// Set this to true and run the tests to regenerate the HTML files located in
	  /// src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram, which
	  /// contain expected values for the HTML code generated by test cases.
	  /// </summary>
	  private const bool OVERWRITE_EXPECTED_HTML_FILES = false;

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Rule public org.camunda.bpm.engine.test.ProcessEngineRule engineRule = new org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule();
	  public ProcessEngineRule engineRule = new ProvidedProcessEngineRule();

	  /// <summary>
	  /// Provides a list of parameters for
	  /// <seealso cref="ProcessDiagramRetrievalTest.ProcessDiagramRetrievalTest(string, string, string, string)"/>
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Parameters public static java.util.Collection<Object[]> data()
	  public static ICollection<object[]> data()
	  {
		return Arrays.asList(new object[][]
		{
			new object[] {"testStartEventWithNegativeCoordinates", ".bpmn", ".png", "sid-61D1FC47-8031-4834-A9B4-84158E73F7B9"},
			new object[] {"testStartAndEndEventWithNegativeCoordinates", ".bpmn", ".png", "sid-61D1FC47-8031-4834-A9B4-84158E73F7B9"},
			new object[] {"testProcessWithTask", ".bpmn", ".png", "sid-1E142B16-AFAF-429E-A441-D1232CFBD560"},
			new object[] {"testProcessFromCamundaFoxDesigner", ".bpmn", ".png", "UserTask_1"},
			new object[] {"testProcessFromCamundaFoxDesigner", ".bpmn", ".jpg", "UserTask_1"},
			new object[] {"testProcessFromActivitiDesigner", ".bpmn20.xml", ".png", "Send_rejection_notification_via_email__3"},
			new object[] {"testSequenceFlowOutOfBounds", ".bpmn", ".png", "sid-61D1FC47-8031-4834-A9B4-84158E73F7B9"},
			new object[] {"testProcessFromAdonis", ".bpmn", ".png", "_16615"},
			new object[] {"testProcessFromIboPrometheus", ".bpmn", ".png", "ibo-5784efbe-35ac-44bc-bcbe-4c18a2f23d5d"},
			new object[] {"testProcessFromIboPrometheus", ".bpmn", ".jpg", "ibo-5784efbe-35ac-44bc-bcbe-4c18a2f23d5d"},
			new object[] {"testInvoiceProcessCamundaFoxDesigner", ".bpmn20.xml", ".jpg", "Rechnung_freigeben_125"},
			new object[] {"testInvoiceProcessSignavio", ".bpmn", ".png", "Freigebenden_zuordnen_143"},
			new object[] {"testInvoiceProcessFromBusinessProcessIncubator", ".bpmn", ".png", "Rechnung_kl_ren_148"},
			new object[] {"testProcessFromYaoqiang", ".bpmn", ".png", "_3"}
		});
	  }

	  private readonly string xmlFileName;
	  private readonly string imageFileName;
	  private readonly string highlightedActivityId;
	  private RepositoryService repositoryService;
	  private string deploymentId;

	  private ProcessDefinitionQuery processDefinitionQuery;

	  public ProcessDiagramRetrievalTest(string modelName, string xmlFileExtension, string imageFileExtension, string highlightedActivityId)
	  {
		this.xmlFileName = modelName + xmlFileExtension;
		this.imageFileName = modelName + imageFileExtension;
		this.highlightedActivityId = highlightedActivityId;
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Before public void setup()
	  public virtual void setup()
	  {
		repositoryService = engineRule.RepositoryService;
		deploymentId = repositoryService.createDeployment().addClasspathResource("org/camunda/bpm/engine/test/api/repository/diagram/" + xmlFileName).addClasspathResource("org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName).deploy().Id;
		processDefinitionQuery = repositoryService.createProcessDefinitionQuery();
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @After public void teardown()
	  public virtual void teardown()
	  {
		repositoryService.deleteDeployment(deploymentId, true);
	  }

	  /// <summary>
	  /// Tests <seealso cref="RepositoryService.getProcessModel(string)"/>.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Test public void testGetProcessModel() throws Exception
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
	  public virtual void testGetProcessModel()
	  {
		if (1 == processDefinitionQuery.count())
		{
		  ProcessDefinition processDefinition = processDefinitionQuery.singleResult();
		  Stream expectedStream = new FileStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + xmlFileName, FileMode.Open, FileAccess.Read);
		  Stream actualStream = repositoryService.getProcessModel(processDefinition.Id);
		  assertTrue(isEqual(expectedStream, actualStream));
		}
		else
		{
		  // some test diagrams do not contain executable processes
		  // and are therefore ignored by the engine
		}
	  }

	  /// <summary>
	  /// Tests <seealso cref="RepositoryService.getProcessDiagram(string)"/>.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Test public void testGetProcessDiagram() throws Exception
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
	  public virtual void testGetProcessDiagram()
	  {
		if (1 == processDefinitionQuery.count())
		{
		  ProcessDefinition processDefinition = processDefinitionQuery.singleResult();
		  Stream expectedStream = new FileStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName, FileMode.Open, FileAccess.Read);
		  Stream actualStream = repositoryService.getProcessDiagram(processDefinition.Id);
	//      writeToFile(repositoryService.getProcessDiagram(processDefinition.getId()),
	//              new File("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName + ".actual.png"));
		  assertTrue(isEqual(expectedStream, actualStream));
		}
		else
		{
		  // some test diagrams do not contain executable processes
		  // and are therefore ignored by the engine
		}
	  }

//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Test public void testGetProcessDiagramAfterCacheWasCleaned()
	  public virtual void testGetProcessDiagramAfterCacheWasCleaned()
	  {
		if (1 == processDefinitionQuery.count())
		{
		  engineRule.ProcessEngineConfiguration.DeploymentCache.discardProcessDefinitionCache();
		  // given
		  ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().singleResult();

		  // when
		  Stream stream = repositoryService.getProcessDiagram(processDefinition.Id);

		  // then
		  assertNotNull(processDefinition.DiagramResourceName);
		  assertNotNull(stream);
		}
		else
		{
		  // some test diagrams do not contain executable processes
		  // and are therefore ignored by the engine
		}
	  }

	  /// <summary>
	  /// Tests <seealso cref="RepositoryService.getProcessDiagramLayout(string)"/> and
	  /// <seealso cref="ProcessDiagramLayoutFactory.getProcessDiagramLayout(System.IO.Stream_Input, System.IO.Stream_Input)"/>.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @Test public void testGetProcessDiagramLayout() throws Exception
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
	  public virtual void testGetProcessDiagramLayout()
	  {
		DiagramLayout processDiagramLayout;
		if (1 == processDefinitionQuery.count())
		{
		  ProcessDefinition processDefinition = processDefinitionQuery.singleResult();
		  assertNotNull(processDefinition);
		  processDiagramLayout = repositoryService.getProcessDiagramLayout(processDefinition.Id);
		}
		else
		{
		  // some test diagrams do not contain executable processes
		  // and are therefore ignored by the engine
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final java.io.InputStream bpmnXmlStream = new java.io.FileInputStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + xmlFileName);
		  Stream bpmnXmlStream = new FileStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + xmlFileName, FileMode.Open, FileAccess.Read);
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':
//ORIGINAL LINE: final java.io.InputStream imageStream = new java.io.FileInputStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName);
		  Stream imageStream = new FileStream("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName, FileMode.Open, FileAccess.Read);

		  assertNotNull(bpmnXmlStream);
		  assertNotNull(imageStream);

		  // we need to run this in the ProcessEngine context
		  processDiagramLayout = engineRule.ProcessEngineConfiguration.CommandExecutorTxRequired.execute(new CommandAnonymousInnerClass(this, bpmnXmlStream, imageStream));
		}
		assertLayoutCorrect(processDiagramLayout);
	  }

	  private class CommandAnonymousInnerClass : Command<DiagramLayout>
	  {
		  private readonly ProcessDiagramRetrievalTest outerInstance;

		  private Stream bpmnXmlStream;
		  private Stream imageStream;

		  public CommandAnonymousInnerClass(ProcessDiagramRetrievalTest outerInstance, Stream bpmnXmlStream, Stream imageStream)
		  {
			  this.outerInstance = outerInstance;
			  this.bpmnXmlStream = bpmnXmlStream;
			  this.imageStream = imageStream;
		  }

		  public DiagramLayout execute(CommandContext commandContext)
		  {
			return (new ProcessDiagramLayoutFactory()).getProcessDiagramLayout(bpmnXmlStream, imageStream);
		  }
	  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private void assertLayoutCorrect(org.camunda.bpm.engine.repository.DiagramLayout processDiagramLayout) throws java.io.IOException
	  private void assertLayoutCorrect(DiagramLayout processDiagramLayout)
	  {
		string html = generateHtmlCode(imageFileName, processDiagramLayout, highlightedActivityId);

		File htmlFile = new File("src/test/resources/org/camunda/bpm/engine/test/api/repository/diagram/" + imageFileName + ".html");
		if (OVERWRITE_EXPECTED_HTML_FILES)
		{
		  FileUtils.writeStringToFile(htmlFile, html);
		  fail("The assertions of this test only work if ProcessDiagramRetrievalTest#OVERWRITE_EXPECTED_HTML_FILES is set to false.");
		}
		assertEquals(FileUtils.readFileToString(htmlFile).replace("\r", ""), html); // remove carriage returns in case the files have been fetched via Git on Windows
	  }

	  private static string generateHtmlCode(string imageUrl, DiagramLayout processDiagramLayout, string highlightedActivityId)
	  {
		StringBuilder html = new StringBuilder();
		html.Append("<!DOCTYPE html>\n");
		html.Append("<html>\n");
		html.Append("  <head>\n");
		html.Append("    <style type=\"text/css\"><!--\n");
		html.Append("      .BPMNElement {\n");
		html.Append("        position: absolute;\n");
		html.Append("        border: 2px dashed lightBlue;\n");
		html.Append("        border-radius: 5px; -moz-border-radius: 5px;\n");
		html.Append("      }\n");
		if (!string.ReferenceEquals(highlightedActivityId, null) && highlightedActivityId.Length > 0)
		{
		  html.Append("      #" + highlightedActivityId + " {border: 2px solid red;}\n");
		}
		html.Append("    --></style>");
		html.Append("  </head>\n");
		html.Append("  <body>\n");
		html.Append("    <div style=\"position: relative\">\n");
		html.Append("      <img src=\"" + imageUrl + "\" />\n");

		IList<DiagramNode> nodes = new List<DiagramNode>(processDiagramLayout.Nodes);
		// sort the nodes according to their ID property.
		nodes.Sort(new DiagramNodeComparator());
		foreach (DiagramNode node in nodes)
		{
		  html.Append("      <div");
		  html.Append(" class=\"BPMNElement\"");
		  html.Append(" id=\"" + node.Id + "\"");
		  html.Append(" style=\"");
		  html.Append(" left: " + (int)(node.X - 2) + "px;");
		  html.Append(" top: " + (int)(node.Y - 2) + "px;");
		  html.Append(" width: " + node.Width.Value + "px;");
		  html.Append(" height: " + node.Height.Value + "px;\"></div>\n");
		}
		html.Append("    </div>\n");
		html.Append("  </body>\n");
		html.Append("</html>");
		return html.ToString();
	  }

//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
//ORIGINAL LINE: private static boolean isEqual(java.io.InputStream stream1, java.io.InputStream stream2) throws java.io.IOException
	  private static bool isEqual(Stream stream1, Stream stream2)
	  {

		  ReadableByteChannel channel1 = Channels.newChannel(stream1);
		  ReadableByteChannel channel2 = Channels.newChannel(stream2);

		  ByteBuffer buffer1 = ByteBuffer.allocateDirect(1024);
		  ByteBuffer buffer2 = ByteBuffer.allocateDirect(1024);

		  try
		  {
			  while (true)
			  {

				  int bytesReadFromStream1 = channel1.read(buffer1);
				  int bytesReadFromStream2 = channel2.read(buffer2);

				  if (bytesReadFromStream1 == -1 || bytesReadFromStream2 == -1)
				  {
					  return bytesReadFromStream1 == bytesReadFromStream2;
				  }

				  buffer1.flip();
				  buffer2.flip();

				  for (int i = 0; i < Math.Min(bytesReadFromStream1, bytesReadFromStream2); i++)
				  {
					  if (buffer1.get() != buffer2.get())
					  {
						  return false;
					  }
				  }

				  buffer1.compact();
				  buffer2.compact();
			  }

		  }
		  finally
		  {
			  if (stream1 != null)
			  {
				  stream1.Close();
			  }
			  if (stream2 != null)
			  {
				  stream2.Close();
			  }
		  }
	  }

	  /// <summary>
	  /// Might be used for debugging <seealso cref="ProcessDiagramRetrievalTest.testGetProcessDiagram()"/>.
	  /// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unused") private static void writeToFile(java.io.InputStream is, java.io.File file) throws Exception
//JAVA TO C# CONVERTER WARNING: Method 'throws' clauses are not available in .NET:
	  private static void writeToFile(Stream @is, File file)
	  {
		DataOutputStream @out = new DataOutputStream(new BufferedOutputStream(new FileStream(file, FileMode.Create, FileAccess.Write)));
		int c;
		while ((c = @is.Read()) != -1)
		{
		  @out.writeByte(c);
		}
		@is.Close();
		@out.close();
	  }

	  /// <summary>
	  /// sorts <seealso cref="DiagramNode DiagramNodes"/> by ID 
	  /// </summary>
	  public class DiagramNodeComparator : IComparer<DiagramNode>
	  {

		public virtual int Compare(DiagramNode o1, DiagramNode o2)
		{
		  if (string.ReferenceEquals(o1.Id, null))
		  {
			return 0;
		  }
		  return o1.Id.CompareTo(o2.Id);
		}

	  }

	}

}